package jsenv

import com.microsoft.playwright.impl.driver.Driver
import java.nio.file.{Files, Path, Paths, FileSystem, FileSystems, FileSystemAlreadyExistsException}
import java.io.IOException
import java.net.{URI, URISyntaxException}
import scala.collection.JavaConverters._
import scala.util.{Try, Failure, Success}

class DriverJarScala extends Driver {
  import DriverJarScala._

  private val driverTempDir: Path = {
    val alternativeTmpdir = Option(System.getProperty("playwright.driver.tmpdir"))
    val prefix = "playwright-java-"
    alternativeTmpdir match {
      case Some(dir) => Files.createTempDirectory(Paths.get(dir), prefix)
      case None => Files.createTempDirectory(prefix)
    }
  }

  driverTempDir.toFile.deleteOnExit()

  private var preinstalledNodePath: Option[Path] = Option(System.getProperty("playwright.nodejs.path")).map { nodePath =>
    val path = Paths.get(nodePath)
    if (!Files.exists(path)) throw new RuntimeException(s"Invalid Node.js path specified: $nodePath")
    path
  }

  logMessage(s"created DriverJarScala: $driverTempDir")

  override protected def initialize(installBrowsers: Boolean): Unit = {
    if (preinstalledNodePath.isEmpty && env.containsKey(PLAYWRIGHT_NODEJS_PATH)) {
      preinstalledNodePath = Some(Paths.get(env.get(PLAYWRIGHT_NODEJS_PATH)))
      if (!Files.exists(preinstalledNodePath.get)) {
        throw new RuntimeException("Invalid Node.js path specified: " + preinstalledNodePath.get)
      }
    } else {
      preinstalledNodePath.foreach(path => env.put(PLAYWRIGHT_NODEJS_PATH, path.toString))
    }

    extractDriverToTempDir()
    println("extracted driver from jar to " + driverPath())
    if (installBrowsers) installBrowsersScala(env.asScala.toMap)
  }

  private def installBrowsersScala(env: Map[String, String]): Unit = {
    val skip = env.getOrElse(PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD, System.getenv(PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD))
    if (Option(skip).exists(s => s != "0" && s.toLowerCase != "false")) {
      println("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set")
      return
    }

    if (env.contains(SELENIUM_REMOTE_URL) || Option(System.getenv(SELENIUM_REMOTE_URL)).isDefined) {
      println("Skipping browsers download because `SELENIUM_REMOTE_URL` env variable is set")
      return
    }

    val driverPath = driverPath()
    if (!Files.exists(driverPath)) {
      throw new RuntimeException("Failed to find driver: " + driverPath)
    }

    val processBuilder = createProcessBuilder()
    processBuilder.command().add("install")
    processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT)
    processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT)
    val process = processBuilder.start()
    val result = process.waitFor(10, TimeUnit.MINUTES)
    if (!result) {
      process.destroy()
      throw new RuntimeException("Timed out waiting for browsers to install")
    }
    if (process.exitValue() != 0) {
      throw new RuntimeException("Failed to install browsers, exit code: " + process.exitValue())
    }
  }

  // Additional Scala methods for file system operations, extracting driver, etc.
  // These would need to be implemented similarly to their Java counterparts,
  // taking advantage of Scala's functional features and better handling of options and exceptions.
}

object DriverJarScala {
  private val PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD = "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD"
  private val SELENIUM_REMOTE_URL = "SELENIUM_REMOTE_URL"
  private val PLAYWRIGHT_NODEJS_PATH = "PLAYWRIGHT_NODEJS_PATH"

  // Implementation of static methods and utilities specific to Scala
}
